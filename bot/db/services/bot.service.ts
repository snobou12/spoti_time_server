/** @format */

import { support_chat_id } from "../../const/const";
import { resolve } from "path";

import bot from "../../index";
import UserModel from "../models/user.model";
import FeaturesModel from "../../../web/models/features.model";
const source = resolve("./bot/assets/greeting.jpg");

class BotService {
	async sendMessageFromBot(id: number, message: string) {
		try {
			await bot.bot.telegram.sendMessage(id, message);
			return "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ";
		} catch (e) {
			console.log(e);
		}
	}
	// TODO:
	async getBannedUsers() {
		const users = await UserModel.find();
		const ids: number[] = [];
		const bannedIds: number[] = [];
		users.forEach(user => ids.push(user.id));

		// for (const userId of ids) {
		// 	try {
		// 		console.log("kek");
		// 		await bot.bot.telegram.getChat(userId);
		// 	} catch (e) {
		// 		console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –º–µ–Ω—è`);
		// 		bannedIds.push(userId);
		// 	}
		// }

		try {
			const message = await bot.bot.telegram.sendMessage(674301145, ".");
			await bot.bot.telegram.deleteMessage(674301145, message.message_id);
		} catch (e: any) {
			if (e.response.description === "Forbidden: bot was blocked by the user") {
				console.log("–Æ–∑–µ—Ä –∑–∞–±–∞–Ω–∏–ª —Ç–µ–±—è");
			}
		}
		console.log(bannedIds.length);
		return bannedIds;
	}
	async sendMessageAboutEndSub(telegramIds: string[]) {
		// –ø–æ 10 —á–µ–ª–æ–≤–µ–∫ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
		const batchSize = 10; //  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–µ—Ç–µ–ª–π –≤ –∫–∞–∂–¥–æ–º –±–∞—Ç—á–µ (—Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã)
		const delay = 15 * 1000; // 30 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∞

		const sendMessageBatch = async (users: string[]) => {
			for (const userId of users) {
				try {
					const user = await UserModel.findOne({ id: userId });

					await bot.bot.telegram.sendPhoto(
						userId,
						{ source },
						{
							caption: `–ü—Ä–∏–≤–µ—Ç, —É —Ç–µ–±—è –∫–∞–∂–µ—Ç—Å—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞ <b>Spotify</b>\n–¢—ã –∑–Ω–∞–µ—à—å –∫ –∫–æ–º—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è ü´¢\n–ù–∞–ø–∏—à–∏ –º–Ω–µ /start –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è!`,
							parse_mode: "HTML",
						}
					);

					if (user) {
						user.category = undefined;
						await user.save();
					}
				} catch (error) {
					console.error(
						`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: ${userId}`,
						error
					);
				}
			}
		};

		const sendMessagesWithDelay = async (
			users: string[],
			delay: number,
			batchSize: number
		) => {
			for (let i = 0; i < users.length; i += batchSize) {
				const batch = users.slice(i, i + batchSize);
				await sendMessageBatch(batch);
				if (i + batchSize < users.length) {
					await new Promise(resolve => setTimeout(resolve, delay));
				}
			}
		};

		await sendMessagesWithDelay(telegramIds, delay, batchSize);
	}

	async sendTestPost(message: string) {
		try {
			const features = await FeaturesModel.findOne();
			if (!features) {
				console.error("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫");
			}

			let src = source;
			const postPreviewImageSrc = features?.postPreviewImageSrc;

			if (postPreviewImageSrc) {
				const splittedSrc = features?.postPreviewImageSrc.split("/");
				src = resolve(`./uploads/${splittedSrc[splittedSrc.length - 1]}`);
			}

			await bot.bot.telegram.sendPhoto(
				support_chat_id,
				{ source: src },
				{
					caption: message,
					parse_mode: "HTML",
				}
			);
			return "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ";
		} catch (e) {
			console.log(e);
		}
	}

	async sendPost(text: string, isAllUsers: boolean) {
		// –ø–æ 10 —á–µ–ª–æ–≤–µ–∫ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
		const batchSize = 10; //  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–µ—Ç–µ–ª–π –≤ –∫–∞–∂–¥–æ–º –±–∞—Ç—á–µ (—Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã)
		const delay = 15 * 1000; // 15 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∞
		const features = await FeaturesModel.findOne();
		if (!features) {
			console.error("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫");
		}

		let src = source;
		const postPreviewImageSrc = features?.postPreviewImageSrc;

		const sendMessageBatch = async (users: string[]) => {
			if (postPreviewImageSrc) {
				const splittedSrc = features?.postPreviewImageSrc.split("/");
				src = resolve(`./uploads/${splittedSrc[splittedSrc.length - 1]}`);
			}
			for (const userId of users) {
				try {
					await bot.bot.telegram.sendPhoto(
						userId,
						{ source: src },
						{
							caption: text,
							parse_mode: "HTML",
						}
					);
					console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: ${userId}`);
				} catch (error) {
					console.error(
						`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: ${userId}`,
						error
					);
				}
			}
		};

		const sendMessagesWithDelay = async (
			users: string[],
			delay: number,
			batchSize: number
		) => {
			for (let i = 0; i < users.length; i += batchSize) {
				const batch = users.slice(i, i + batchSize);
				await sendMessageBatch(batch);
				if (i + batchSize < users.length) {
					console.log(
						`–û–∂–∏–¥–∞–Ω–∏–µ ${
							delay / 1000
						} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä—Ç–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...`
					);
					console.log(
						`–û—Å—Ç–∞–ª–æ—Å—å ${
							((batch.length / batchSize) * (delay / 1000)) / 60
						} –º–∏–Ω—É—Ç`
					);
					await new Promise(resolve => setTimeout(resolve, delay));
				}
			}
		};

		const users = await UserModel.find();

		const telegramIds: string[] = [];
		if (!isAllUsers) {
			users.forEach(user => {
				if (!user.category) {
					telegramIds.push(String(user.id));
				}
			});
		} else {
			users.forEach(user => {
				telegramIds.push(String(user.id));
			});
		}
		console.log("–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏");
		const approximateTime = `–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: ${
			((users.length / batchSize) * (delay / 1000)) / 60
		} –º–∏–Ω—É—Ç`;
		console.log(approximateTime);
		await sendMessagesWithDelay(telegramIds, delay, batchSize);
		return "–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–¥–µ–ª–∞–Ω–∞";
	}
}

export default new BotService();
